#pragma checksum "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\Pages\Student\_Student.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "93884407e03cca92f16bfb20b64943baa05c472b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BitCube.Section3.Pages.Student
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using BitCube.Section3;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using BitCube.Section3.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using BitCube.Section3.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using BitCube.Section3.Pages.Student;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\_Imports.razor"
using BitCube.Section3.Pages.Degree;

#line default
#line hidden
#nullable disable
    public partial class _Student : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 62 "C:\Users\user-pc\Desktop\BitCube\BitcubeEval\BitCube\BitCube.Section3\Pages\Student\_Student.razor"
 
    private Student student;
    private List<Student> students = new List<Student>();

    //Notification Toast to be used to indicate outcome of operations
    NotificationMessage notification = new NotificationMessage { Duration = 4000};

    protected override void OnInitialized()
    {
        students = SampleDataService.GetAllStudents();
    }

    //Method to add new Student to in-memory db(SampleDataService)
    async Task AddStudent()
    {
        student = await DialogService.OpenAsync<AddStudentForm>("Add Student");

        if(student != null)
        {
            students.Add(student);


            notification = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Student Added Succesfully",
            };

            NotificationService.Notify(notification);
        }
    }

    //Method to Remove a linked Degree from a student 
    async Task RemoveDegree(int studentId)
    {
        var deleteStudent = SampleDataService.GetStudentById(studentId);
        if (deleteStudent != null)
        {
            //Confirm Dialog
            bool? confirmDelete = await DialogService.Confirm($"Are You Sure You Want to Remove {deleteStudent.FullName} from {deleteStudent.EnrolledDegree.Name} ?",
            "Confirm Deregistration",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "Cancel"});

            if(confirmDelete == true)
            {
                SampleDataService.RemoveDegreeFromStudent(studentId);

                students = SampleDataService.GetAllStudents();
                notification = new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Student Removed From Degree",
                };

                NotificationService.Notify(notification);
            }

        }

    }

    //Method to Show a Dialog Form and Select/Set a Degree from dropdown list to a student
    async Task EnrollDegree(int studentId)
    {
        Student editStudent = students.Where(s => s.Id == studentId).FirstOrDefault();
        List<Degree> degrees = SampleDataService.GetAllDegrees();

        //A dialog form to link a Degree to a Student
        editStudent = await DialogService.OpenAsync<EnrollStudent>("Enroll Student To Degree", new Dictionary<string, object> { { "Student", editStudent }, { "Degrees", degrees } });

        if(editStudent != null)
        {
            if(editStudent.EnrolledDegree != null)
            {
                //Update a Student Degree Enrollment to in-memory database
                var enrollStudent = SampleDataService.EnrollStudent(editStudent.Id, editStudent.EnrolledDegree);

                //if update was successfull(will be null if something went wrong)
                if (enrollStudent != null)
                {
                    students = SampleDataService.GetAllStudents();

                    notification = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Student Enrolled To a Degree",
                    };

                    NotificationService.Notify(notification);
                }
                else
                {
                    notification = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Something went wrong while Updating a Student Degree",
                    };

                    NotificationService.Notify(notification);
                }
            }

        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService NotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService DialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SampleDataService sampledata { get; set; }
    }
}
#pragma warning restore 1591
